mixed-port: 7890
log-level: warning
external-controller: 127.0.0.1:9090
geox-url:
  geoip: "{{ .github }}/MetaCubeX/meta-rules-dat/releases/download/latest/geoip.dat"
  geosite: "{{ .github }}/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"
  mmdb: "{{ .github }}/MetaCubeX/meta-rules-dat/releases/download/latest/geoip.metadb"
  asn: "{{ .github }}/xishang0128/geoip/releases/download/latest/GeoLite2-ASN.mmdb"

dns:
  enable: true
  prefer-h3: true
  listen: 0.0.0.0:1053
  ipv6: true
  enhanced-mode: fake-ip
  fake-ip-range: 198.18.0.1/16
  fake-ip-filter:
    # 局域网内域名
    - "*.lan"
    # QQ 快速登录
    - localhost.ptlogin2.qq.com
    # Windows 网络状态检测
    - "*.msftconnecttest.com"
    - "+.msftncsi.com"
    # Arch Linux 网络状态检测
    - "ping.archlinux.org"
  default-nameserver:
    - 223.5.5.5
  nameserver-policy:
    "geosite:cn,private":
      - https://doh.pub/dns-query
      - https://dns.alidns.com/dns-query
  nameserver:
    - https://8.8.8.8/dns-query
    - https://1.1.1.1/dns-query

tun:
  enable: true
  stack: gvisor
  auto-route: true
  auto-detect-interface: true
  dns-hijack:
    - any:53
    - tcp://any:53

pp: &pp
  type: http
  interval: 86400
  proxy: DIRECT
  health-check:
    enable: true
    url: https://www.gstatic.com/generate_204
    interval: 300
    timeout: 5000
    expected-status: 204

proxy-providers:
  bocchi: {<<: *pp, url: {{ (rbwFields "Subscribe").BocchiProvider.value | quote }}}
  infiniport: {<<: *pp, url: {{ (rbwFields "Subscribe").InfiniPortProvider.value | quote }}}
  miaona: {<<: *pp, url: {{ (rbwFields "Subscribe").MiaonaProvider.value | quote }}}

group-anchor:
  test: &test {type: url-test, url: http://www.gstatic.com/generate_204, interval: 300, tolerance: 50}
  direct: &direct {type: select, proxies: [DIRECT, 🚀 节点选择]}
  proxy: &proxy {type: select, proxies: [🚀 节点选择, DIRECT]}
  reject: &reject {type: select, proxies: [REJECT, DIRECT]}

proxy-groups:
  - {name: 🚀 节点选择, type: select, proxies: [Bocchi, InfiniPort, Miaona, DIRECT], include-all-providers: true}
  - {name: Bocchi, <<: *test, icon: https://bocchi.ooo/img/favicon.ico, use: [bocchi]}
  - {name: InfiniPort, <<: *test, icon: https://infiniport.xyz/assets/images/favicon.svg, use: [infiniport]}
  - {name: Miaona, <<: *test, icon: https://miaona.info/favicon.ico, use: [miaona]}
  - {name: 💬 OpenAI, <<: *test, include-all-providers: true, filter: "日本|Japan|美国|United States"}
  - {name: Ⓜ️ 微软服务, <<: *direct}
  - {name: 🎮 游戏平台, <<: *direct}
  - {name: 🛑 广告拦截, <<: *reject}
  - {name: 🐟 漏网之鱼, <<: *proxy}

rules:
  - RULE-SET,local-area-network,DIRECT
  - RULE-SET,un-ban,DIRECT
  - RULE-SET,ad,🛑 广告拦截
  - RULE-SET,program-ad,🛑 广告拦截
  - RULE-SET,easy-list,🛑 广告拦截
  - RULE-SET,easy-list-china,🛑 广告拦截
  - RULE-SET,easy-privacy,🛑 广告拦截
  - RULE-SET,googlecn,DIRECT
  - RULE-SET,steamcn,DIRECT
  - RULE-SET,microsoft,Ⓜ️ 微软服务
  - RULE-SET,openai,💬 OpenAI
  - RULE-SET,epic,🎮 游戏平台
  - RULE-SET,origin,🎮 游戏平台
  - RULE-SET,sony,🎮 游戏平台
  - RULE-SET,steam,🎮 游戏平台
  - RULE-SET,nintendo,🎮 游戏平台
  - RULE-SET,gfw,🚀 节点选择
  - RULE-SET,china-domain,DIRECT
  - RULE-SET,china-company-ip,DIRECT
  - RULE-SET,download,DIRECT
  - GEOIP,CN,DIRECT
  - MATCH,🐟 漏网之鱼

rp: &rp {type: http, interval: 86400, proxy: DIRECT, behavior: classical, format: yaml}

rule-providers:
  local-area-network: {<<: *rp, url: "{{ .provider }}/LocalAreaNetwork.yaml"}
  un-ban: {<<: *rp, url: "{{ .provider }}/UnBan.yaml"}
  ad: {<<: *rp, url: "{{ .provider }}/BanAD.yaml"}
  program-ad: {<<: *rp, url: "{{ .provider }}/BanProgramAD.yaml"}
  easy-list: {<<: *rp, url: "{{ .provider }}/BanEasyList.yaml"}
  easy-list-china: {<<: *rp, url: "{{ .provider }}/BanEasyListChina.yaml"}
  easy-privacy: {<<: *rp, url: "{{ .provider }}/BanEasyPrivacy.yaml"}
  googlecn: {<<: *rp, url: "{{ .provider }}/Ruleset/GoogleCN.yaml"}
  steamcn: {<<: *rp, url: "{{ .provider }}/Ruleset/SteamCN.yaml"}
  microsoft: {<<: *rp, url: "{{ .provider }}/Ruleset/Microsoft.yaml"}
  openai: {<<: *rp, url: "{{ .provider }}/Ruleset/OpenAi.yaml"}
  epic: {<<: *rp, url: "{{ .provider }}/Ruleset/Epic.yaml"}
  origin: {<<: *rp, url: "{{ .provider }}/Ruleset/Origin.yaml"}
  sony: {<<: *rp, url: "{{ .provider }}/Ruleset/Sony.yaml"}
  steam: {<<: *rp, url: "{{ .provider }}/Ruleset/Steam.yaml"}
  nintendo: {<<: *rp, url: "{{ .provider }}/Ruleset/Nintendo.yaml"}
  gfw: {<<: *rp, url: "{{ .provider }}/ProxyGFWlist.yaml"}
  china-domain: {<<: *rp, url: "{{ .provider }}/ChinaDomain.yaml"}
  china-company-ip: { <<: *rp, behavior: ipcidr, url: "{{ .provider }}/ChinaCompanyIp.yaml"}
  download: {<<: *rp, url: "{{ .provider }}/Download.yaml"}

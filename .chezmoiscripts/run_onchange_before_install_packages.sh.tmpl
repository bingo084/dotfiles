{{- define "process_packages" -}}
  {{- $archPkg := list -}} {{- $archDeps := list -}} {{- $aurPkg := list -}} {{- $aurDeps := list -}}
  {{- $deps := get . "deps" -}} {{- $aur := get . "aur" -}} {{- $group := .group -}} {{- $installed := .installed -}}

  {{- range .packages -}}
    {{- if and (kindIs "string" .) (not (has . $installed)) -}}
      {{- if and $deps $aur -}}
        {{ $aurDeps = append $aurDeps . }}
      {{- else if $deps -}}
        {{ $archDeps = append $archDeps . }}
      {{- else if $aur -}}
        {{ $aurPkg = append $aurPkg . }}
      {{- else -}}
        {{ $archPkg = append $archPkg . }}
      {{- end -}}
    {{- else if and (kindIs "map" .) (not (hasKey . "group")) (not (has .name $installed)) -}}
      {{- if not (hasKey . "deps") -}} {{- $_ := set . "deps" $deps -}} {{- end -}}
      {{- if not (hasKey . "aur") -}} {{- $_ := set . "aur" $aur -}} {{- end -}}
      {{- if and .deps .aur -}}
        {{ $aurDeps = append $aurDeps .name }}
      {{- else if .deps -}}
        {{ $archDeps = append $archDeps .name }}
      {{- else if .aur -}}
        {{ $aurPkg = append $aurPkg .name }}
      {{- else -}}
        {{ $archPkg = append $archPkg .name }}
      {{- end -}}
    {{- end -}}
  {{- end -}}

  {{- if or $archPkg $archDeps $aurPkg $aurPkg -}}
    echo ":: Starting installation of [{{ .group }}]" {{- "\n" -}}
    {{- template "install_packages" (dict "packages" $archPkg) -}}
    {{- template "install_packages" (dict "packages" $archDeps "deps" true) -}}
    {{- template "install_packages" (dict "packages" $aurPkg "aur" true) -}}
    {{- template "install_packages" (dict "packages" $aurDeps "deps" true "aur" true) -}}
    echo ":: Finished installation of [{{ .group }}]" {{- "\n" -}}
  {{- end -}}

  {{- range .packages -}}
    {{- if and (kindIs "map" .) (hasKey . "group") -}}
      {{- if not (hasKey . "deps") -}} {{- $_ := set . "deps" $deps -}} {{- end -}}
      {{- if not (hasKey . "aur") -}} {{- $_ := set . "aur" $aur -}} {{- end -}}
      {{- $_ := set . "group" (print $group " - " .group) -}}
      {{- $_ := set . "installed" $installed -}}
      {{- template "process_packages" . -}}
    {{- end -}}
  {{- end -}}
{{- end -}}

{{- define "install_packages" -}}
  {{- if .packages -}}
    {{ if get . "aur" -}} paru -Sa {{ else -}} sudo pacman -S {{ end -}}
    --noconfirm --needed {{- if get . "deps" }} --asdeps {{ else }} {{ end -}}
    {{- join " " .packages }} {{- "\n" -}}
  {{- end -}}
{{- end -}}

{{- if and (eq .chezmoi.os "linux") (eq .chezmoi.osRelease.id "arch") -}}
#!/bin/bash

if [ "$CHEZMOI_COMMAND" = "init" ]; then
  echo ":: Updating system"
  sudo pacman -Syu --noconfirm
fi
{{ $installed := splitList "\n" (output "pacman" "-Qq") }}
{{ $params := dict "packages" .packages.arch "group" "Arch packages" "installed" $installed }}
{{- template "process_packages" $params -}}
{{- end -}}

" appearance
set showcmd
set number relativenumber
set scrolloff=5
set ideajoin
set idearefactormode=keep
" search
set showmatch
set hlsearch
set incsearch
set ignorecase
set smartcase
" clipboard
set clipboard+=unnamedplus
" keymap
let mapleader=" "
map H ^
map L $
vmap H ^
vmap L $
imap jk <esc>
map <CR> :nohlsearch<CR><CR>
map <leader>bc :bdelete<CR>
map <leader>bo :tabo<CR>
" 标签页切换
map <C-;> gT
map <C-'> gt
map <leader>1 1gt
map <leader>2 2gt
map <leader>3 3gt
map <leader>4 4gt
map <leader>5 5gt
map <leader>6 6gt
map <leader>7 7gt
map <leader>8 8gt
map <leader>9 9gt
" NERDTree
map <leader>e :NERDTreeFocus<CR>
" easymotion
map s <Plug>(easymotion-f2)
map S <Plug>(easymotion-F2)
" map f <Plug>(easymotion-fl2)
" map F <Plug>(easymotion-Fl2)
" which-key
set notimeout
set timeoutlen = 5000
" highlightedyank
let g:highlightedyank_highlight_color = "rgba(160, 160, 160, 155)"
" plugins
set NERDTree
set surround
set easymotion
set commentary
set argtextobj
set multiple-cursors
let context_aware=1
set which-key
set highlightedyank
" input method
set keep-english-in-normal-and-restore-in-insert
let rime_ascii = 1

" idea action
map <leader>nc <Action>(NewClass)
map <leader>d <Action>(JRebel)
map <leader>s <Action>(SelectInProjectView)
map <leader>rf <Action>(ExternalSystem.ProjectRefreshAction)
" map <leader>cl <Action>(CommentByLineComment)
" vmap <leader>cl <Action>(CommentByLineComment)
" map <leader>cb <Action>(CommentByBlockComment)
" vmap <leader>cb <Action>(CommentByBlockComment)
" git action
map <leader>gm <Action>(Git.Menu)
map <leader>gr <Action>(Vcs.RollbackChangedLines)
map <leader>gR :!git restore %<CR>:action SynchronizeCurrentFile<CR>
map <leader>gp <Action>(VcsShowCurrentChangeMarker)
map [c <Action>(VcsShowPrevChangeMarker)
map ]c <Action>(VcsShowNextChangeMarker)
" code action
map <leader>lr <Action>(RenameElement)
map gi <Action>(GotoImplementation)
map gd <Action>(GotoDeclarationOnly)
map gr <Action>(ShowUsages)
map gj <Action>(Back)
map gk <Action>(Forward)
map <leader>im <Action>(ImplementMethods)
map <leader>fs <Action>(FileStructurePopup)
map <leader>lf <Action>(ReformatCode)
map [d <Action>(GotoPreviousError)
map ]d <Action>(GotoNextError)
vmap <leader>dl <Action>(EditorDeleteLine)
vmap <leader>rl <Action>(EditorDuplicateLines)
map <leader>il <Action>(Inline)
vmap <leader>il <Action>(Inline)
" ideavimrc action
map <leader>ov :e ~/.config/ideavim/ideavimrc<CR>
map <leader>rv <Action>(IdeaVim.ReloadVimRc.reload)
" find action
map <leader>ff <Action>(SearchEverywhere)
vmap <leader>ff <Action>(SearchEverywhere)
map <leader>ft <Action>(FindInPath)
vmap <leader>ft <Action>(FindInPath)
map <leader>rr <Action>(ReplaceInPath)
vmap <leader>rr <Action>(ReplaceInPath)
" move action
map <C-A-j> <Action>(MoveLineDown)
map <C-A-k> <Action>(MoveLineUp)
vmap <C-A-j> <Action>(MoveLineDown)
vmap <C-A-k> <Action>(MoveLineUp)
imap <C-A-j> <esc> :action MoveLineDown<CR> hi
imap <C-A-k> <esc> :action MoveLineUp<CR> hi
" run action
map <leader>rc <Action>(ChooseRunConfiguration)
" window action
map <C--> <Action>(ActivateTerminalToolWindow)
map <leader>at <Action>(ActivateTerminalToolWindow)
map <leader>as <Action>(ActivateServicesToolWindow)
map <leader>hw <Action>(HideActiveWindow)
map <leader>ha <Action>(HideAllWindows)
map <leader>\\ <Action>(SplitVertically)
map <leader>- <Action>(SplitHorizontally)
map <A-h> <C-w>h
map <A-j> <C-w>j
map <A-k> <C-w>k
map <A-l> <C-w>l
map <A-w> <Action>(Unsplit)
